#!/usr/bin/env python3

import json

from pwn import process, remote, sys

from sage.all import PolynomialRing, Zmod

from Crypto.Util.number import getPrime, long_to_bytes


def get_process():
    if len(sys.argv) == 1:
        return process(['python3', 'challenge.py'])

    host, port = sys.argv[1].split(':')
    return remote(host, port)


p = getPrime(1024)
e = 65537

io = get_process()

io.sendlineafter(b'> ', b'a')
io.sendlineafter(b'> (JSON) ', json.dumps({'p': p, 'q': p}).encode())

io.sendlineafter(b'> ', b'e')
io.recvuntil(b'Flag = ')
c1 = int(io.recvlineS(), 16)

d1 = pow(e, -1, p * (p - 1))
m1 = pow(c1, d1, p ** 2)

io.sendlineafter(b'> ', b'a')
io.sendlineafter(b'> (JSON) ', json.dumps({'p': p, 'q': p}).encode())

io.sendlineafter(b'> ', b'e')
io.recvuntil(b'Flag = ')
c2 = int(io.recvlineS(), 16)

d2 = pow(e, -1, p ** 3 * p ** 2 * p * (p - 1))
m2 = pow(c2, d2, p ** 4)

x, y = PolynomialRing(Zmod(p), names='x, y').gens()
px1 = x * y ** (1024 * 4 // 256 - 2) - m1
px2 = x * y ** (1024 * 6 // 256 - 2) - m2

py = px1 * y ** 8 - px2
PP = PolynomialRing(Zmod(p), names='y')
_y = min(PP(py).roots(multiplicities=False))

x = PolynomialRing(Zmod(p), names='x').gens()[0]
px = x * _y ** (1024 * 4 // 256 - 2) - m1
_x = px.roots()[0][0]

io.success(long_to_bytes(int(_x)).decode())